walkmod-refactor-plugin 
=======================
Raquel Pau <raquelpau@gmail.com>

image:https://travis-ci.org/rpau/walkmod-refactor-plugin.svg?branch=master["Build Status", link="https://travis-ci.org/rpau/walkmod-refactor-plugin"]

This is a walkmod plugin to support refactorings rules (mainly for migrations) in Java source files. For example, if you need to upgrade 
an specific java library and some methods change their names, arguments..; others become deprecated and some classes change their name too.  In this situation,
You can spend a lot of hours changing those parts of code that do not compile with the new version or rewrite automatically your code with this walkmod plugin :). 

Refactoring rules are specified in json files. So, you just need to add two code transformations in your `walkmod.xml`.
file to allow walkmod change all code references.

Once walkmod is executed, you can upgrade you maven dependency and check if the project compiles :)

== Requirements

- Add the https://github.com/rpau/walkmod-maven-plugin[walkmod-maven-plugin] into your `walkmod.xml`. It is necessary to allow walkmod discover your classpath.
- Execute `mvn install` in your project.
- Create your own refactoring rules

== Refactoring rules

This plugin support two types of refactoring rules: **class refactoring rules** to rewrite those references of classes whose name has changed; and 
**method refactoring rules** to rewrite those method calls that have a different name or their arguments have changed.

=== Class refactoring rules

Class refactoring rules are renaming rules for Java classes. To specify class refactoring rules, you need to create a json file, with a simple
json oblect, whose field names are the old names of a Java class, and their values the new class names. 

For example, imagine you are using a Java library (Maven dependency), which contains a class called `foo.Bar` and you need to upgrade 
this library to the newest version, where the class `foo.Bar` has been renamed to `foo.BarDAO`. You need to specify this rule in a 
```json
{
  "foo.Bar": "foo.BarDAO"
}
```
=== Method refactoring rules

Method refactoring rules support three scenarios:

1. **Method Renaming**: For those methods that have changed their name. Example: `foo.Bar:execute() => foo.Bar:run()`
2. **Argument Rules**: For those methods that have changed their arguments (type, order o quantity). For this type of rules, you need to specify 
the whole class name and an alias for each argument (e.g `foo.Bar:open(java.io.File file)`). Then, you could use the alias in expressions if 
you can derive the new argument type of these methods (e.g `foo.Bar:open(file.getPath())`). The character separator between arguments is the `;`.
3. **Result Rules**: for those methods that have changed their result type. There is a keyword called `result` to specify how the new 
method call must be transformed into a new expression to ensure the code follows the same workflow. For example:  `foo.Resource:isOpen()` => `foo.Resource:isClosed():!result`

To specify method refactoring rules, you need to create a json file with a simple json oblect, whose field names are the 
old method declaration of a Java class, and their values the mapping with the new declaration. Let's see the whole example.

```json
{
 "foo.Bar:execute()" : "foo.Bar:run()",
 "foo.Bar:open(java.io.File file)" : "foo.Bar:open(file.getPath())",
 "foo.Bar:open(java.io.File file; java.lang.Boolean append)" : "foo.Bar:open(file.getPath(); append)",
 "foo.Resource:isOpen()" : "foo.Resource:isClosed():!result"
}
```

== Usage

walkmod-refactor-plugin is a default plugin loaded via  http://www.walkmod.com[walkmod]. So, you just need 
to add the plugin in your `${PROJECT}/walkmod.xml` file when you wants upgrade the used version without 
downloading walkmod again.  

```XML
<!DOCTYPE walkmod PUBLIC "-//WALKMOD//DTD"  "http://www.walkmod.com/dtd/walkmod-1.0.dtd" >
<walkmod>
  <plugins>
    <plugin groupId="org.walkmod" artifactId="walkmod-maven-plugin" version="1.0" />
    <plugin groupId="org.walkmod" artifactId="walkmod-refactor-plugin" version="1.0" />
  </plugins>
  <conf-providers>
    <conf-provider type="walkmod:commons:maven"></conf-provider>
  </conf-providers>
  <chain name="main-chain">	
    <transformation type="walkmod:commons:method-refactor">
      <param name="refactoringConfigFile">src/conf/refactoring-methods.json</param>
    </transformation>
    <transformation type="walkmod:commons:class-refactor">
      <param name="refactoringConfigFile">src/conf/refactoring-classes.json</param>
    </transformation>
  </chain>	
</walkmod>
```


== Contributing

If you want to hack on this, fork it, improve it and send me a pull request.

To get started using it, just clone it and call mvn install. 
